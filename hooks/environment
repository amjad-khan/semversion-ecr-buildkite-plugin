#!/bin/bash

# Enable strict error handling
set -euo pipefail

HOOKS_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$HOOKS_DIR"

# Function to validate initial parameters
validate_parameters() {
  # Check and validate optional parameters
  INITIAL_VERSION="${BUILDKITE_PLUGIN_SEMVERSIONSION_ECR_INITIAL_VERSION:-v1.0.0}"
  TAG_SUFFIX="${BUILDKITE_PLUGIN_SEMVERSIONSION_ECR_TAG_SUFFIX:-false}"

  if [[ ! "$INITIAL_VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    echo "Error: Invalid initial version format. Expected format: vX.Y.Z (e.g., v1.0.0)"
    exit 1
  fi

  if [[ "$TAG_SUFFIX" != "true" && "$TAG_SUFFIX" != "false" ]]; then
    echo "Error: tag_suffix must be either 'true' or 'false'."
    exit 1
  fi

  if [[ -z "${BUILDKITE_PLUGIN_SEMVERSION_ECR_REPOSITORY:-}" ]]; then
    echo "Error: Repository not specified."
    exit 1
  fi
  echo "Using Repository: ${BUILDKITE_PLUGIN_SEMVERSION_ECR_REPOSITORY}"

  if [[ -z "${BUILDKITE_PLUGIN_SEMVERSION_ECR_REGION:-}" ]]; then
    echo "Error: Region not specified."
    exit 1
  fi
  echo "Region: ${BUILDKITE_PLUGIN_SEMVERSION_ECR_REGION}"

  if [[ -z "${BUILDKITE_PLUGIN_SEMVERSION_ECR_ACCOUNT:-}" ]]; then
    echo "Error: Account not specified."
    exit 1
  fi
  echo "Account ID: ${BUILDKITE_PLUGIN_SEMVERSION_ECR_ACCOUNT}"
}

# Call the parameter validation function
validate_parameters

# Use the provided version branch or default to "main"
VERSION_BRANCH="${BUILDKITE_PLUGIN_SEMVERSION_ECR_VERSION_BRANCH:-main}"

# Execute only if on the main branch
if [ "$BUILDKITE_BRANCH" == "$VERSION_BRANCH" ]; then

  # Extract the latest commit message
  commit_message=$(git log -1 --pretty=%s)

  # Check if the commit is a PR merge (contains 'Merge pull request')
  if echo "$commit_message" | grep -q "Merge pull request"; then
    # Extract version bump type from the PR title
    VERSION_BUMP=$(echo "$commit_message" | sed -n 's|.*DemystData/\([^/]*\)/.*|\1|p')
    VERSION_BUMP="${VERSION_BUMP:-patch}"
  else
    # Handle direct commits to the main branch
    echo "Direct commit detected. Commit message: '$commit_message'"

    # Try to extract a version bump keyword (e.g., 'bump:major', 'bump:minor')
    VERSION_BUMP=$(echo "$commit_message" | grep -oE "bump:(major|minor|patch)" | cut -d: -f2)

    # Default to 'patch' if no bump keyword is found
    VERSION_BUMP="${VERSION_BUMP:-patch}"
  fi

  echo "Version bump type: $VERSION_BUMP"

  # Fetch the latest version tag from ECR based on tag_suffix
  if [[ "${BUILDKITE_PLUGIN_SEMVERSION_ECR_TAG_SUFFIX:-false}" == "true" ]]; then
    LATEST_TAG=$(aws ecr describe-images \
      --repository-name "${BUILDKITE_PLUGIN_SEMVERSION_ECR_REPOSITORY}" \
      --region "${BUILDKITE_PLUGIN_SEMVERSION_ECR_REGION}" \
      --registry-id "${BUILDKITE_PLUGIN_SEMVERSION_ECR_ACCOUNT}" \
      --query "imageDetails[?ends_with(imageTags[0], \`-${VERSION_BRANCH}\`)] | sort_by(@, &imagePushedAt)[-1].imageTags[0]" \
      --output text)
  else
      LATEST_TAG=$(aws ecr describe-images \
      --repository-name "${BUILDKITE_PLUGIN_SEMVERSION_ECR_REPOSITORY}" \
      --region "${BUILDKITE_PLUGIN_SEMVERSION_ECR_REGION}" \
      --registry-id "${BUILDKITE_PLUGIN_SEMVERSION_ECR_ACCOUNT}" \
      --query 'imageDetails[?starts_with(imageTags[0], `v`) && !contains(imageTags[0], `-`)] | sort_by(@, &imagePushedAt)[-1].imageTags[0]' \
      --output text)
  fi

  echo "Latest version tag found: $LATEST_TAG"
  # Initialize version to 1.0.0 if no previous tags exist
  if [ -z "$LATEST_TAG" ]; then
    echo "No version tags found; initializing with ${INITIAL_VERSION}"
    LATEST_TAG="${INITIAL_VERSION}"
  fi

  # Strip the 'v' prefix and, if present, the branch suffix
  LATEST_TAG="${LATEST_TAG#v}"

  # Remove branch suffix if tag_suffix is true
  if [[ "${BUILDKITE_PLUGIN_SEMVERSION_ECR_TAG_SUFFIX:-false}" == "true" ]]; then
    LATEST_TAG="${LATEST_TAG%-*}"
  fi

  echo "Latest version tag after filter: $LATEST_TAG"

  MAJOR=$(echo "$LATEST_TAG" | cut -d. -f1)
  MINOR=$(echo "$LATEST_TAG" | cut -d. -f2)
  PATCH=$(echo "$LATEST_TAG" | cut -d. -f3)

  # Increment version based on the identified bump type
  case "$VERSION_BUMP" in
    major)
      MAJOR=$((MAJOR + 1))
      MINOR=0
      PATCH=0
      ;;
    feat)
      MINOR=$((MINOR + 1))
      PATCH=0
      ;;
    fix | patch)
      PATCH=$((PATCH + 1))
      ;;
    *)
      echo "Unknown version bump type: $VERSION_BUMP. Defaulting to patch."
      PATCH=$((PATCH + 1))
      ;;
  esac

  # Construct the next version tag
  NEXT_VERSION="v${MAJOR}.${MINOR}.${PATCH}"

  # Add the branch as a suffix if tag_suffix is true
  if [[ "${BUILDKITE_PLUGIN_SEMVERSION_ECR_TAG_SUFFIX:-false}" == "true" ]]; then
    NEXT_VERSION="${NEXT_VERSION}-${VERSION_BRANCH}"
  fi
  
  echo "Next version for main branch: $NEXT_VERSION"

else
  # For non-main branches, use the build number as the version tag
  NEXT_VERSION="${BUILDKITE_BUILD_NUMBER}-test"
  echo "Non-${VERSION_BRANCH} branch version set to build number: $NEXT_VERSION"
fi

# Export the next version for further use
export NEXT_VER=${NEXT_VERSION}
echo "Exported NEXT_VERSION:$NEXT_VER"